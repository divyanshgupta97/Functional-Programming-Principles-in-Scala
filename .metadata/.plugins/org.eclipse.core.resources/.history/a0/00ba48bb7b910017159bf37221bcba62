object fiddlingAround {
  println("Welcome to the Scala worksheet")       //> Welcome to the Scala worksheet
  def msort[T](xs: List[T])(lt: (T,T) => Boolean): List[T] = {
	val n = xs.length/2
	if(n == 0) xs
	else{
		val(fst, snd) = xs splitAt n
		merge(msort(fst)(lt), msort(snd)(lt))(lt)
	}
}                                                 //> msort: [T](xs: List[T])(lt: (T, T) => Boolean)List[T]

def merge[T](xs:List[T], ys: List[T])(lt: (T,T) => Boolean): List[T] = (xs, ys) match {
	case (Nil, ys) => ys
	case (xs, Nil) => xs
	case (xs, ys) => if(lt(xs.head, ys.head)) xs.head :: merge(xs.tail, ys)(lt) else ys.head :: merge(xs, ys.tail)(lt)
}                                                 //> merge: [T](xs: List[T], ys: List[T])(lt: (T, T) => Boolean)List[T]

msort(List(9,8,7,6,5,4,3,2,1))((x, y) => x < y)   //> res0: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9)

def pack[T](xs: List[T]): List[List[T]] = xs match {
case Nil => Nil
case x::xs1 => {
								val (l_1, l_2) = xs span (y => y == x)
								l_1 :: pack(l_2)
								}
}                                                 //> pack: [T](xs: List[T])List[List[T]]
pack(List("a", "a", "a", "b", "c", "c", "a"))     //> res1: List[List[String]] = List(List(a, a, a), List(b), List(c, c), List(a))
                                                  //| 
def encode[T](xs: List[T]): List[(T, Int)] = xs match {
case Nil => Nil
case x::xs1 => pack(xs) map(x => (x.head, x.length))
}                                                 //> encode: [T](xs: List[T])List[(T, Int)]
encode(List("a", "a", "a", "b", "c", "c", "a"))   //> res2: List[(String, Int)] = List((a,3), (b,1), (c,2), (a,1))

def mapFun[T, U](xs: List[T], f: T => U): List[U] =
  (xs foldRight List[U]())( f(_)::_ )             //> mapFun: [T, U](xs: List[T], f: T => U)List[U]


val fun: (Int => Int) = x => 2 * x                //> fun  : Int => Int = fiddlingAround$$$Lambda$15/1419810764@36f6e879
mapFun(List(1,2,3,4), fun)                        //> res3: List[Int] = List(2, 4, 6, 8)

def lengthFun[T](xs: List[T]): Int =
  (xs foldRight 0)((elem,acc) => acc + 1)         //> lengthFun: [T](xs: List[T])Int
  
 lengthFun(List(1,2,3,4,5,6,7))                   //> res4: Int = 7
 
 val s: String = "Hello World"
 s filter(c => c.isUpper)
}