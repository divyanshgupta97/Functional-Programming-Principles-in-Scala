object nQueens {
def nQueens(n: Int): Set[List[Int]] = {

	def isSafe(col: Int, queens: List[Int]): Boolean = {
		val k: Int = queens.length
		val pairList: List[(Int, Int)] = queens zip ((k-1) until 0)
		pairList.forall{case(elem, row) => (math.abs(elem - col) != 0) && (math.abs(elem - col) != (k - row))}
	}
		
		
	def placeQueens(k: Int): Set[List[Int]] =
		if(k == 0) Set(List())
		else
			for{
				queens <- placeQueens(k - 1)
				col <- 1 until n
				if isSafe(col, queens)
			} yield col::queens
	 
	placeQueens(n)
}
nQueens(4)
}