object fiddlingAround {
  println("Welcome to the Scala worksheet")
  def msort[T](xs: List[T])(lt: (T,T) => Boolean): List[T] = {
	val n = xs.length/2
	if(n == 0) xs
	else{
		val(fst, snd) = xs splitAt n
		merge(msort(fst)(lt), msort(snd)(lt))(lt)
	}
}

def merge[T](xs:List[T], ys: List[T])(lt: (T,T) => Boolean): List[T] = (xs, ys) match {
	case (Nil, ys) => ys
	case (xs, Nil) => xs
	case (xs, ys) => if(lt(xs.head, ys.head)) xs.head :: merge(xs.tail, ys)(lt) else ys.head :: merge(xs, ys.tail)(lt)
}

msort(List(9,8,7,6,5,4,3,2,1))((x, y) => x < y)

def pack[T](xs: List[T]): List[List[T]] = xs match {
case Nil => Nil
case x::xs1 => {
								val (l_1, l_2) = xs span (y => y == x)
								l_1 :: pack(l_2)
								}
}
pack(List("a", "a", "a", "b", "c", "c", "a"))
def encode[T](xs: List[T]): List[(T, Int)] = xs match {
case Nil => Nil
case x::xs1 => pack(xs) map(x => (x.head, x.length))
}
encode(List("a", "a", "a", "b", "c", "c", "a"))

def mapFun[T, U](xs: List[T], f: T => U): List[U] =
  (xs foldRight List[U]())( f(_)::_ )


val fun: (Int => Int) = x => 2 * x
mapFun(List(1,2,3,4), fun)

def lengthFun[T](xs: List[T]): Int =
  (xs foldRight 0)((elem,acc) => acc + 1)
  
 lengthFun(List(1,2,3,4,5,6,7))
 
 val s: String = "Hello World"
 s filter(c => c.isUpper)
 s exists(c => c.isUpper)
 s forall(c => c.isUpper)
 
 val pairs = List(1,2,3) zip s
 pairs.unzip
 s flatMap(c => List('.', c))
 (1 to 3) flatMap(x => (1 to 4) map ( y => (x,y)))
def isPrime(n: Int): Boolean = (2 to n-1) map (x => (x, n)) forall ( p match {case (x, y) => y % x != 0})
}